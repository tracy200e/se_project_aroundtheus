!function(){"use strict";var e={960:function(e,t,s){e.exports=s.p+"df100efc54d4645073d7.jpg"},656:function(e,t,s){e.exports=s.p+"8edfe6cd78e39aafc871.jpg"},822:function(e,t,s){e.exports=s.p+"44e6fede87f55e5327cc.jpg"},328:function(e,t,s){e.exports=s.p+"e463b225f0897d749d63.jpg"},994:function(e,t,s){e.exports=s.p+"70aac30a40409c4dbc71.jpg"},339:function(e,t,s){e.exports=s.p+"2e37fd0c260a298af732.jpg"}},t={};function s(n){var o=t[n];if(void 0!==o)return o.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,s),r.exports}s.m=e,s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s.b=document.baseURI||self.location.href,function(){const e=[{name:"Lago di Braies",link:new URL(s(656),s.b)},{name:"Vanoise National Park",link:new URL(s(994),s.b)},{name:"Lake Louise",link:new URL(s(822),s.b)},{name:"Latemar",link:new URL(s(328),s.b)},{name:"Bald Mountains",link:new URL(s(960),s.b)},{name:"Yosemite Valley",link:new URL(s(339),s.b)}];class t{constructor(e,t){let{data:s,handleImageClick:n}=e;this._name=s.name,this._link=s.link,this._cardSelector=t,this._handleImageClick=n}_setEventListeners(){this._likeButton=this._element.querySelector(".card__like-button"),this._likeButton.addEventListener("click",this._handleLikeIcon),this._element.querySelector(".card__delete-button").addEventListener("click",(()=>this._handleDeleteCard())),this._imageWindow=this._element.querySelector(".card__image"),this._imageWindow.addEventListener("click",(()=>this._handleImageClick({link:this._link,name:this._name})))}_handleLikeIcon=()=>{this._likeButton.classList.toggle("card__like-button_active")};_handleDeleteCard(){this._element.remove(),this._element=null}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){this._element=this._getTemplate();const e=this._element.querySelector(".card__image");return e.src=this._link,e.alt=`Photo of ${this._name}`,this._element.querySelector(".card__title").textContent=this._name,this._setEventListeners(),this._element}}class n{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputList=this._form.querySelectorAll(this._inputSelector),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleInputState(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkValidity(e){return!e.validity.valid}_hasInvalidInput=()=>Array.from(this._inputList).some(this._checkValidity);_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_setEventListeners(){this.disableButton(),this._inputList.forEach((e=>{e.addEventListener("input",(()=>{this._toggleInputState(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._toggleButtonState(),this._inputList.forEach((e=>{this._hideInputError(e)}))}}class o{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._closeButton=this._popupElement.querySelector(".modal__close-button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.addEventListener("click",(e=>{e.target===e.currentTarget&&this.close()})),this._closeButton.addEventListener("click",(()=>this.close()))}}class r extends o{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._submitButton=this._popupElement.querySelector(".form__button"),this._formInputs=this._popupForm.querySelectorAll("input"),this._handleFormSubmit=t}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){this._popupForm.reset(),super.close()}}const i=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__add-button"),a=document.querySelector("#name"),c=document.querySelector("#profession"),u=document.forms["profile-form"],_=document.forms["card-form"],d={};var m;m={inputSelector:".form__input",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_disabled",inputErrorClass:"form__input_type_error",errorClass:"form__error_visible",formSelector:"form"},Array.from(document.querySelectorAll(m.formSelector)).forEach((e=>{const t=new n(m,e),s=e.getAttribute("name");d[s]=t,t.enableValidation()}));const h=new class extends o{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement.querySelector(".modal__image"),this._imageCaption=this._popupElement.querySelector(".modal__name"),super.setEventListeners()}open(e){this._imageElement.src=e.link,this._imageElement.alt=`Image ${e.name}`,this._imageCaption.textContent=e.name,super.open()}}("#image-modal");function p(e){return new t({data:e,handleImageClick:e=>{h.open(e)}},"#card-element").getView()}h.close();const f=new class{constructor(e,t){let{items:s,renderer:n}=e;this._renderedItems=s,this._renderer=n,this._container=document.querySelector(t)}renderItems(){this._renderedItems.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:e,renderer:e=>{const t=p(e);f.addItem(t)}},".cards__list");f.renderItems(e);const E=new r("#add-modal",(e=>{const t=p(e);E.close(),f.addItem(t)}));l.addEventListener("click",(()=>{d[_.getAttribute("name")].resetValidation(),E.open()})),E.setEventListeners();const v=new class{constructor(e,t){this._name=document.querySelector(e),this._profession=document.querySelector(t)}getUserInfo(){return{name:this._name.textContent,profession:this._profession.textContent}}setUserInfo(e,t){this._name.textContent=e,this._profession.textContent=t}}(".profile__name",".profile__profession"),b=new r("#edit-modal",(e=>{v.setUserInfo(e.name,e.profession),b.close()}));i.addEventListener("click",(()=>{const e=v.getUserInfo();a.value=e.name,c.value=e.profession,d[u.getAttribute("name")].disableButton(),b.open()})),b.setEventListeners()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,